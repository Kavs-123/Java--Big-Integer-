Java BigInteger
BigInteger class is used for mathematical operation which involves very big integer calculations that are outside the limit of all available primitive data types.

Input Format
There will be two lines containing two numbers, a  and b .

Output Format
Output two lines. The first line should contain a+b , and the second line should contain aXb. Don't print any leading zeros.

Sample Input
1234
20

Sample Output
1254
24680

Explanation
1234+20=1254
1234*20=24680

___________________________________________________________________________
CODE-
 public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);     
       BigInteger A=sc.nextBigInteger();
       BigInteger B=sc.nextBigInteger();
       BigInteger C =A.add(B);
       BigInteger D=A.multiply(B);
       System.out.println(C);
       System.out.println(D);
    }

_______________________________________________________________________________-
******USEFUL TIPS*******
1.Make sure you prepare to catch an exception from the BigInteger - if the scanner fails to find a string you might get a BigInteger with non integer characters and it'll throw an exception.

Scanner scanner = new Scanner(fileOrOther);
try{
     BigInteger bigint = scanner.nextBigInteger();
} catch(NumberFormatException ex) {
//handle Code here
}

2.Declaration
int a, b;                
BigInteger A, B; 
Initialization:

 
a = 54;
b = 23;
A  = BigInteger.valueOf(54);
B  = BigInteger.valueOf(37); 
And for Integers available as string you can initialize them as:

A  = new BigInteger(“54”);
B  = new BigInteger(“123456789123456789”); 
Some constant are also defined in BigInteger class for ease of initialization :

A = BigInteger.ONE;
// Other than this, available constant are BigInteger.ZERO 
// and BigInteger.TEN 
Mathematical operations:

int c = a + b;
BigInteger C = A.add(B); 
Other similar function are subtract() , multiply(), divide(), remainder()
But all these function take BigInteger as their argument so if we want these operation with integers or string convert them to BigInteger before passing them to functions as shown below:

String str = “123456789”;
BigInteger C = A.add(new BigInteger(str));
int val  = 123456789;
BigInteger C = A.add(BigInteger.valueOf(val)); 

Extraction of value from BigInteger:
int x   =  A.intValue();   // value should be in limit of int x
long y   = A.longValue();  // value should be in limit of long y
String z = A.toString();  

Comparison:
if (a < b) {}         // For primitive int
if (A.compareTo(B) < 0)  {} // For BigInteger 
Actually compareTo returns -1(less than), 0(Equal), 1(greater than) according to values.

For equality we can also use:
if (A.equals(B)) {}  // A is equal to B 

